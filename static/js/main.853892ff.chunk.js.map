{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","app/app-reducer.ts","utils/error-utils.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/auth-reducer.ts","features/Login/Login.tsx","components/Common/PageNotFound/PageNotFound.tsx","components/Common/PageLoader/PageLoader.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["ServerResultCodeResponse","TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","email","password","rememberMe","captcha","appSlice","createSlice","name","initialState","status","error","isInitialized","reducers","setAppErrorAC","state","action","payload","setAppStatusAC","setIsInitializedAC","appReducer","reducer","actions","handleServerAppError","data","dispatch","messages","length","handleServerNetworkError","message","todolistSlice","removeTodolistAC","index","findIndex","tl","splice","addTodolistAC","unshift","filter","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","entityStatus","setTodolistsAC","map","todolistsReducer","tasksSlice","removeTaskAC","tasks","tk","addTaskAC","task","updateTaskAC","setTasksAC","updateEntityStatus","value","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskTC","domainModel","getState","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","catch","console","warn","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","tasksForTodolist","useDispatch","useEffect","thunk","todolist","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","removeTodolist","style","paddingTop","Button","TodolistsList","todolists","useSelector","isLoggedIn","auth","err","removeTaskTC","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","slice","setIsLoggedInAC","authReducer","Login","formik","useFormik","initialValues","validate","values","errors","test","onSubmit","success","resetForm","justifyContent","FormControl","FormLabel","href","target","handleSubmit","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","PageNotFound","PageLoader","App","finally","AppBar","position","Toolbar","edge","aria-label","Menu","LinearProgress","Container","fixed","path","element","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.853892ff.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\nimport {RequestStatusType} from \"../app/app-reducer\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'ed4fceee-142b-4594-8fa5-aac94446b199'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(email: string, password: string, rememberMe: boolean, captcha?: string) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{userId: number}>>>(`auth/login`, {email, password, rememberMe, captcha})\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/login`)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<AuthMeResponseType>>(`auth/me`)\r\n    },\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum ServerResultCodeResponse {\r\n    success = 0,\r\n    failed = 1,\r\n    captcha = 10,\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type AuthMeResponseType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false,\r\n}\r\nexport const appSlice = createSlice({\r\n    name: 'counter',\r\n    initialState,\r\n    reducers: {\r\n        setAppErrorAC(state, action: PayloadAction<string | null>){state.error = action.payload},\r\n        setAppStatusAC(state, action: PayloadAction<RequestStatusType>){state.status = action.payload},\r\n        setIsInitializedAC(state, action: PayloadAction<boolean>){state.isInitialized = action.payload},\r\n    },\r\n})\r\n\r\n// reducer\r\nexport const appReducer = appSlice.reducer\r\n\r\n// action creators\r\nexport const setAppErrorAC = appSlice.actions.setAppErrorAC\r\nexport const setAppStatusAC = appSlice.actions.setAppStatusAC\r\nexport const setIsInitializedAC = appSlice.actions.setIsInitializedAC\r\n\r\n// types\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\n","import {setAppErrorAC, setAppStatusAC} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC(\"failed\"))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC(\"failed\"))\r\n}\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\nconst todolistSlice = createSlice({\r\n    name: \"todolist\",\r\n    initialState,\r\n    reducers: {\r\n        removeTodolistAC(state, action: PayloadAction<string>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload)\r\n            if (index !== -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<TodolistType>) {\r\n            state.unshift({\r\n                ...action.payload,\r\n                filter: \"all\",\r\n            })\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{ todolistId: string, title: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            if (index !== -1) {\r\n                state[index].title = action.payload.title\r\n            }\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ todolistId: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            if (index !== -1) {\r\n                state[index].filter = action.payload.filter\r\n            }\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ todolistId: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            if (index !== -1) {\r\n                state[index].entityStatus = action.payload.status\r\n            }\r\n        },\r\n        setTodolistsAC(state, action: PayloadAction<TodolistType[]>) {\r\n            return action.payload.map(tl => ({\r\n                ...tl,\r\n                filter: \"all\",\r\n                entityStatus: \"idle\"\r\n            }))\r\n        },\r\n    }\r\n})\r\n\r\n// reducer\r\n\r\nexport const todolistsReducer = todolistSlice.reducer\r\n\r\n// action creators\r\n\r\nexport const removeTodolistAC = todolistSlice.actions.removeTodolistAC\r\nexport const addTodolistAC = todolistSlice.actions.addTodolistAC\r\nexport const changeTodolistTitleAC = todolistSlice.actions.changeTodolistTitleAC\r\nexport const changeTodolistFilterAC = todolistSlice.actions.changeTodolistFilterAC\r\nexport const changeTodolistEntityStatusAC = todolistSlice.actions.changeTodolistEntityStatusAC\r\nexport const setTodolistsAC = todolistSlice.actions.setTodolistsAC\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC( 'succeeded'))\r\n            })\r\n            .catch((err) => {\r\n                handleServerNetworkError(err, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC({\r\n            todolistId: todolistId,\r\n            status: 'loading'\r\n        }))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC({todolistId: id, title: title}))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}\r\n","import {TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {RequestStatusType, setAppStatusAC, } from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {addTodolistAC, removeTodolistAC, setTodolistsAC} from \"./todolists-reducer\";\r\n\r\nconst initialState: TasksStateType = {}\r\nconst tasksSlice = createSlice({\r\n    name: \"tasks\",\r\n    initialState,\r\n    reducers: {\r\n        removeTaskAC(state, action: PayloadAction<{taskId: string, todolistId: string}>){\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(tk => tk.id === action.payload.taskId)\r\n\r\n            if(index !== -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        },\r\n        addTaskAC(state, action: PayloadAction<{task: TaskType, todolistId: string}>) {\r\n            state[action.payload.todolistId].unshift(action.payload.task)\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{taskId: string, model: UpdateDomainTaskModelType, todolistId: string}>){\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(tk => tk.id === action.payload.taskId)\r\n\r\n            if(index !== -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        },\r\n        setTasksAC(state, action: PayloadAction<{tasks: Array<TaskType>, todolistId: string}>){\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        },\r\n        updateEntityStatus(state, action: PayloadAction<{taskId: string, todolistId: string, value: RequestStatusType}>){\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(tk => tk.id === action.payload.taskId)\r\n\r\n            if(index !== 1) {\r\n                tasks[index].entityStatus = action.payload.value\r\n            }\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.id] = []\r\n        });\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload]\r\n        });\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.forEach(tl => {\r\n                state[tl.id] = []\r\n            })\r\n        });\r\n    }\r\n})\r\n\r\nexport const tasksReducer = tasksSlice.reducer\r\n\r\n// actions creators\r\nexport const removeTaskAC = tasksSlice.actions.removeTaskAC\r\nexport const addTaskAC = tasksSlice.actions.addTaskAC\r\nexport const updateTaskAC = tasksSlice.actions.updateTaskAC\r\nexport const setTasksAC = tasksSlice.actions.setTasksAC\r\nexport const updateEntityStatus = tasksSlice.actions.updateEntityStatus\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            debugger\r\n            dispatch(setTasksAC({tasks: tasks, todolistId: todolistId}))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    dispatch(updateEntityStatus({taskId: taskId, todolistId: todolistId, value: \"loading\"}))\r\n\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n\r\n                const action = removeTaskAC({taskId: taskId,todolistId: todolistId})\r\n                dispatch(action)\r\n            }\r\n            else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(err => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC({task: task, todolistId: todolistId})\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        let task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC({taskId: taskId,model: domainModel, todolistId})\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\n\r\nexport type UpdateDomainTaskModelType = Partial<Pick<TaskType, \"title\" | \"description\" | \"status\" | \"priority\" | \"startDate\" | \"deadline\">>\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\nimport {RequestStatusType} from \"../../../../app/app-reducer\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    entityStatus: RequestStatusType\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n            disabled={props.entityStatus === \"loading\"}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler} disabled={props.entityStatus === \"loading\"}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(({demo = false, ...props}: PropsType) => {\r\n    let tasksForTodolist = props.tasks ? props.tasks : []\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t}\r\n                                                entityStatus={t.entityStatus}\r\n                                                todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport { addTaskTC, removeTaskTC, TasksStateType, updateTaskTC } from './tasks-reducer'\r\nimport { TaskStatuses } from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({todolistId: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if(!isLoggedIn) {\r\n        return <Navigate to={\"login\"} />\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import {\r\n    authAPI,\r\n    LoginParamsType,\r\n    ServerResultCodeResponse\r\n} from \"../../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {\r\n    setAppStatusAC,\r\n    setIsInitializedAC\r\n} from \"../../app/app-reducer\";\r\nimport {\r\n    handleServerAppError,\r\n    handleServerNetworkError\r\n} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initState = {\r\n    isLoggedIn: false,\r\n}\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\n\r\n// action creators\r\n\r\nexport const setIsLoggedInAC = slice.actions.setIsLoggedInAC\r\n\r\n// thunk\r\n\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    const {email, password, rememberMe, captcha} = data\r\n\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n\r\n    authAPI.login(email, password, rememberMe, captcha)\r\n        .then(res => {\r\n            if (res.data.resultCode === ServerResultCodeResponse.success) {\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(err => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: false}))\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(err => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n}\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(err => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setIsInitializedAC(true))\r\n        })\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {LoginParamsType} from \"../../api/todolists-api\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nexport const Login = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: \"\",\r\n            rememberMe: false,\r\n        },\r\n        validate: (values) => {\r\n            const errors: Partial<Pick<LoginParamsType, \"rememberMe\" | \"password\" | \"email\">> = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email is required!';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"Password is required!\"\r\n            } else if (values.password.length < 3) {\r\n                errors.password = \"Password should contain at least 3 characters.\"\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    });\r\n\r\n    if(isLoggedIn) {\r\n        return <Navigate to={\"/\"} ></Navigate>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}> here\r\n                        </a>\r\n                    </p>\r\n                    <p>\r\n                        Email: <strong>free@samuraijs.com</strong>\r\n                    </p>\r\n                    <p>\r\n                        Password: <strong>free</strong>\r\n                    </p>\r\n                </FormLabel>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email &&\r\n                        <div style={{color: \"red\"}}>{formik.errors.email}</div>\r\n                        }\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password &&\r\n                        <div style={{color: \"red\"}}>{formik.errors.password}</div>\r\n                        }\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox {...formik.getFieldProps('rememberMe')}/>}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import \"./pageNotFound.css\"\r\n\r\nexport const PageNotFound = () => {\r\n\r\n\r\n    return (\r\n        <div id=\"notfound\">\r\n            <div className=\"notfound\">\r\n                <div className=\"notfound-404\">\r\n                    <h3>Oops! Page not found</h3>\r\n                    <h1><span>4</span><span>0</span><span>4</span></h1>\r\n                </div>\r\n                <h2>we are sorry, but the page you requested was not found</h2>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import \"./pageLoader.css\"\r\n\r\nexport const PageLoader = () => {\r\n    return (\r\n        <div className=\"loader\">\r\n            <div className=\"dot\">L</div>\r\n            <div className=\"dot\">O</div>\r\n            <div className=\"dot\">A</div>\r\n            <div className=\"dot\">D</div>\r\n            <div className=\"dot\">I</div>\r\n            <div className=\"dot\">N</div>\r\n            <div className=\"dot\">G</div>\r\n            <div className=\"cogs\">\r\n                <div className=\"cog cog0\">\r\n                    <div className=\"bar\"></div>\r\n                    <div className=\"bar\"></div>\r\n                    <div className=\"bar\"></div>\r\n                    <div className=\"bar\"></div>\r\n                </div>\r\n                <div className=\"cog cog1\">\r\n                    <div className=\"bar\"></div>\r\n                    <div className=\"bar\"></div>\r\n                    <div className=\"bar\"></div>\r\n                    <div className=\"bar\"></div>\r\n                </div>\r\n                <div className=\"cog cog2\">\r\n                    <div className=\"bar\"></div>\r\n                    <div className=\"bar\"></div>\r\n                    <div className=\"bar\"></div>\r\n                    <div className=\"bar\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {RequestStatusType} from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {PageNotFound} from \"../components/Common/PageNotFound/PageNotFound\";\r\nimport {initializeAppTC, logoutTC} from \"../features/Login/auth-reducer\";\r\nimport {PageLoader} from \"../components/Common/PageLoader/PageLoader\";\r\n\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const logout = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if(!isInitialized) {\r\n        return <PageLoader />\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    {\r\n                        isLoggedIn && <Button color={\"inherit\"} onClick={logout} >Log Out</Button>\r\n                    }\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={\"/\"} element={<TodolistsList demo={demo}/>}></Route>\r\n                    <Route path={\"/login\"} element={<Login/>}></Route>\r\n                    <Route path={\"/404\"} element={<PageNotFound/>}></Route>\r\n                    <Route path={\"*\"} element={<Navigate to={\"/404\"}></Navigate>}></Route>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import { tasksReducer } from '../features/TodolistsList/tasks-reducer';\r\nimport { todolistsReducer } from '../features/TodolistsList/todolists-reducer';\r\nimport { combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { appReducer } from './app-reducer'\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {HashRouter as Router} from \"react-router-dom\"\n\nReactDOM.render(\n    <React.StrictMode>\n            <Provider store={store}>\n                <Router>\n                <App/>\n                </Router>\n            </Provider>\n    </React.StrictMode>,\ndocument.getElementById('root')\n)\n;\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}